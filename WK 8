COVID 19 PROJECT

# COVID-19 Data Analysis & Reporting

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# 1. Data Collection
# Loading the dataset (ensure that you have downloaded the CSV from 'Our World in Data')
df = pd.read_csv("owid-covid-data.csv")

# 2. Data Loading & Exploration
print(f"Dataset Shape: {df.shape}")
print(f"Columns: {df.columns}")
print(f"First 5 rows:\n{df.head()}")

# Check for missing values
print(f"Missing Values:\n{df.isnull().sum()}")

# 3. Data Cleaning
# Remove rows with missing 'date' or 'total_cases'
df = df.dropna(subset=['date', 'total_cases'])

# Convert date column to datetime format
df['date'] = pd.to_datetime(df['date'])

# Filter for specific countries (e.g., Kenya, USA, India)
countries_of_interest = ['Kenya', 'United States', 'India']
df_filtered = df[df['location'].isin(countries_of_interest)]

# 4. Exploratory Data Analysis (EDA)
# Plot total cases over time for selected countries
plt.figure(figsize=(12, 6))
for country in countries_of_interest:
    country_data = df_filtered[df_filtered['location'] == country]
    plt.plot(country_data['date'], country_data['total_cases'], label=country)

plt.title('Total COVID-19 Cases Over Time')
plt.xlabel('Date')
plt.ylabel('Total Cases')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

# Plot total deaths over time
plt.figure(figsize=(12, 6))
for country in countries_of_interest:
    country_data = df_filtered[df_filtered['location'] == country]
    plt.plot(country_data['date'], country_data['total_deaths'], label=country)

plt.title('Total COVID-19 Deaths Over Time')
plt.xlabel('Date')
plt.ylabel('Total Deaths')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

# 5. Visualizing Vaccination Progress
# Plot cumulative vaccinations over time for selected countries
plt.figure(figsize=(12, 6))
for country in countries_of_interest:
    country_data = df_filtered[df_filtered['location'] == country]
    plt.plot(country_data['date'], country_data['total_vaccinations'], label=country)

plt.title('Total Vaccinations Over Time')
plt.xlabel('Date')
plt.ylabel('Total Vaccinations')
plt.legend()
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

# 6. Optional: Build a Choropleth Map
# Visualizing cases by country (latest data)
latest_data = df[df['date'] == df['date'].max()]
latest_data = latest_data[['location', 'total_cases']].dropna()

# Plot choropleth map using Plotly
fig = px.choropleth(latest_data, locations='location', locationmode='country names',
                    color='total_cases', hover_name='location',
                    color_continuous_scale='Viridis', title="COVID-19 Total Cases by Country (Latest Data)")
fig.show()

# 7. Insights & Reporting
# Example Insights
insights = [
    "The USA has the highest total number of cases among the countries analyzed.",
    "India has shown a rapid increase in vaccinations, significantly reducing new cases.",
    "Kenya's vaccination progress has been slower compared to other countries, with a relatively lower rate of total cases.",
]

print("\nKey Insights:")
for insight in insights:
    print(f"- {insight}")

# Save the cleaned data to a new CSV for reporting
df_filtered.to_csv("cleaned_covid_data.csv", index=False)

